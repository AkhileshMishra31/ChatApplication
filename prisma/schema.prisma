generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String
  email           String   @unique
  password        String
  phone_number    String
  profile_picture String?
  country         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  OTPRequest             OTPRequest[]
  TwoFaAuth              TwoFaAuth?
  UserActivityStatus     UserActivityStatus?
  UserSessions           UserSessions[]
  sentFriendRequests     FriendRequest[]     @relation("Sender")
  receivedFriendRequests FriendRequest[]     @relation("Receiver")
  friendshipsInitiated   Friends[]           @relation("FriendshipInitiator")
  friendshipsReceived    Friends[]           @relation("FriendshipFriend")
  Group                  Group[]
  GroupParticipant       GroupParticipant[]
  Message                Message[]
  ChatParticipant        ChatParticipant[]
  MessageReceipt         MessageReceipt[]
}

model AppAdmin {
  id          String      @id @default(uuid())
  username    String      @unique
  email       String      @unique
  password    String
  roleId      String
  status      AdminStatus @default(ACTIVE)
  createdById String?
  creatorType CreatorType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  createdBy     AppAdmin?  @relation("AdminCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdAdmins AppAdmin[] @relation("AdminCreator")
  role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  role_type      RoleType         @default(SYSTEM)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PermissionSets PermissionSets[]

  appAdmins        AppAdmin[]
  GroupParticipant GroupParticipant[]
}

model Group {
  id              String   @id @default(uuid())
  name            String
  description     String?
  profile_picture String?
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy    User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants GroupParticipant[]
  chat         Chat[]
}

model GroupParticipant {
  id       String   @id @default(uuid())
  groupId  String
  userId   String
  roleId   String
  joinedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role  Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Chat {
  id        String   @id @default(uuid())
  type      ChatType @default(DIRECT)
  groupId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants ChatParticipant[]
  group        Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ChatParticipant {
  id                String   @id @default(uuid())
  chatId            String
  userId            String
  lastReadMessageId String?
  joinedAt          DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

model Message {
  id          String        @id @default(uuid())
  chatId      String
  senderId    String
  content     String?
  messageType MessageType
  status      MessageStatus @default(SENT)
  replyToId   String?
  deletedBy   String[]      @default([])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  replyTo Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replies Message[] @relation("MessageReplies")

  messageReceipts MessageReceipt[]
}

model MessageReceipt {
  id         String     @id @default(uuid())
  messageId  String
  userId     String
  status     ReadStatus @default(DELIVERED)
  seenAt     DateTime?
  readAt     DateTime?
  notifiedAt DateTime?
  message    Message    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId]) 
}

model PermissionSets {
  id                          String                        @id @unique @default(uuid())
  roleId                      String
  isDefault                   Boolean                       @default(false)
  createdBy                   CreatorType                   @default(SYSTEM)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  is_deleted                  Boolean                       @default(false)
  Role                        Role                          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  PermissionForPermissionSets PermissionsForPermissionSet[]

  @@unique([roleId, isDefault])
}

model PermissionsForPermissionSet {
  id        String   @id @unique @default(uuid())
  action    String
  subject   String
  fields    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PermissionSet      PermissionSets @relation(fields: [permission_sets_id], references: [id], onDelete: Cascade)
  permission_sets_id String
}

model OTPRequest {
  id         String    @id @default(uuid())
  otp        String
  email      String
  userId     String?
  type       OTPType
  status     OTPStatus
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime
  verifiedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivityStatus {
  id                       String     @id @default(uuid())
  is_signup_email_verified Boolean    @default(false)
  status                   UserStatus @default(ONLINE)
  userId                   String     @unique
  user                     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
}

model UserSessions {
  id            String   @id @default(uuid())
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFaAuth {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  secret     String
  isEnabled  Boolean   @default(false)
  lastUsedAt DateTime?
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])
}

model Friends {
  id          String   @id @default(uuid())
  initiatorId String
  friendId    String
  createdAt   DateTime @default(now())

  initiator User @relation("FriendshipInitiator", fields: [initiatorId], references: [id])
  friend    User @relation("FriendshipFriend", fields: [friendId], references: [id])

  @@unique([initiatorId, friendId])
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum OTPType {
  SIGNUP
  RESET_PASSWORD
}

enum OTPStatus {
  PENDING
  VERIFIED
  EXPIRED
}

enum UserStatus {
  ONLINE
  OFFLINE
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum ReadStatus {
  DELIVERED
  READ
  SEEN
  NOTIFIED
}

enum RoleType {
  SYSTEM
  GROUP
}

enum CreatorType {
  SYSTEM
  ADMIN
}

enum ChatType {
  DIRECT
  GROUP
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
