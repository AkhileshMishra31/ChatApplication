generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String
  email           String   @unique
  password        String
  phone_number    String
  profile_picture String?
  country         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  OTPRequest             OTPRequest[]
  TwoFaAuth              TwoFaAuth?
  UserActivityStatus     UserActivityStatus?
  UserSessions           UserSessions[]
  sentFriendRequests     FriendRequest[]     @relation("Sender")
  receivedFriendRequests FriendRequest[]     @relation("Receiver")
  friendshipsInitiated   Friends[]           @relation("FriendshipInitiator")
  friendshipsReceived    Friends[]           @relation("FriendshipFriend")
}

model OTPRequest {
  id         String    @id @default(uuid())
  otp        String
  email      String
  userId     String?
  type       OTPType
  status     OTPStatus
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime
  verifiedAt DateTime?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivityStatus {
  id                       String     @id @default(uuid())
  is_signup_email_verified Boolean    @default(false)
  status                   UserStatus @default(ONLINE)
  userId                   String     @unique
  user                     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
}

model UserSessions {
  id            String   @id @default(uuid())
  refresh_token String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFaAuth {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  secret     String
  isEnabled  Boolean   @default(false)
  lastUsedAt DateTime?
}

model FriendRequest {
  id         String              @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])
}

model Friends {
  id          String   @id @default(uuid())
  initiatorId String
  friendId    String
  createdAt   DateTime @default(now())

  initiator User @relation("FriendshipInitiator", fields: [initiatorId], references: [id])
  friend    User @relation("FriendshipFriend", fields: [friendId], references: [id])

  @@unique([initiatorId, friendId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum OTPType {
  SIGNUP
  RESET_PASSWORD
}

enum OTPStatus {
  PENDING
  VERIFIED
  EXPIRED
}

enum UserStatus {
  ONLINE
  OFFLINE
}
